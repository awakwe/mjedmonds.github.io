WEBVTT
Kind: captions
Language: en

00:00:01.490 --> 00:00:07.830
Okay so this video is meant to introduce
you to codeboard, and what I'm looking

00:00:07.830 --> 00:00:13.290
at right now is actually my view of how
code board appears. So it might look a

00:00:13.290 --> 00:00:16.170
little different on your end, but the
first thing you'll notice is that

00:00:16.170 --> 00:00:21.779
there's this file called user_main.c
and you should be able to see this. This

00:00:21.779 --> 00:00:28.710
user_main() is basically going to replace
what you've been using as main(). In

00:00:28.710 --> 00:00:35.309
your previous programs you would write
int main() and then your code here. I have

00:00:35.309 --> 00:00:41.760
to replace main() with user_main() and the
reason for that is because I actually

00:00:41.760 --> 00:00:47.840
have a main.c that is hidden. All
of these files on the left here with (h)

00:00:47.840 --> 00:00:52.800
are only viewable by me. But that's fine.
You don't really need to know how the

00:00:52.800 --> 00:00:57.930
the backend works. The point being is
that to use codeboard you'll basically

00:00:57.930 --> 00:01:03.600
write your code right here in user_main(); this is your
main() function. You can also you

00:01:03.600 --> 00:01:08.369
can add files as you see fit. If you
want to add a file you just click this

00:01:08.369 --> 00:01:17.070
enter a name let's say like util.c
or something. You add the file and then

00:01:17.070 --> 00:01:20.909
now the file appears down here. You
can you can add header files, you can add

00:01:20.909 --> 00:01:26.210
add implementation files, it doesn't
matter.

00:01:26.210 --> 00:01:33.420
So what else...another thing that you need
to be aware of is that you need to save

00:01:33.420 --> 00:01:39.750
your changes so anytime you edit your
codeboard project. Just go up to Project

00:01:39.750 --> 00:01:44.009
and then Save Changes. When you hit save,
there'll be a message displayed down

00:01:44.009 --> 00:01:50.850
here saying "Changes successfully
saved." To actually compile your code,

00:01:50.850 --> 00:01:55.229
you'll hit this button right here called
Compile and then in the same window it

00:01:55.229 --> 00:01:59.460
will tell you "Compilation succeeded"
or it'll give you a reason as to why the

00:01:59.460 --> 00:02:04.530
compilation failed. After you've compiled
your code you can then hit Run which

00:02:04.530 --> 00:02:09.660
will basically execute your program. This
program does nothing right now but if I

00:02:09.660 --> 00:02:13.770
change this to say print("hi\n") or something. Recompile...and then oh...

00:02:13.770 --> 00:02:27.570
printf("hi\n"). Recompile, and then
hit Run. We now see "hi" as the output.

00:02:27.570 --> 00:02:32.100
It works very similar to how XCode or
Visual Studio would. Finally, when you're

00:02:32.100 --> 00:02:36.480
done implementing everything and
you think you have a solution, you can

00:02:36.480 --> 00:02:40.650
hit the Submit button up here. What
Submit does is actually execute your

00:02:40.650 --> 00:02:45.480
code against a series of test cases that
have been predefined, and you will

00:02:45.480 --> 00:02:51.570
actually get a score based on whether or
not you passed those text test cases.

00:02:51.570 --> 00:02:59.160
Right now I'm working in a
template, but let's switch to the

00:02:59.160 --> 00:03:04.770
project called Conditionals. This is
basically a project designed to test

00:03:04.770 --> 00:03:12.990
whether or not a set of points are in...
It tests which quadrant the

00:03:12.990 --> 00:03:18.810
points are in. If we compile this as is,
you can see it run it doesn't do

00:03:18.810 --> 00:03:22.140
anything because we have no
implementation right here. Then we

00:03:22.140 --> 00:03:25.590
hit Submit...
You'll see this "Submitting your solution.

00:03:25.590 --> 00:03:28.500
This may take a few seconds" and then
because we haven't implemented

00:03:28.500 --> 00:03:35.070
anything the program actually fails. 
Every test case fails and then it

00:03:35.070 --> 00:03:39.360
explains why it failed and then
finally at the end, it tells you a score.

00:03:39.360 --> 00:03:46.230
So it's saying you earned zero
points out of eight possible. Fine. For

00:03:46.230 --> 00:03:49.800
a moment I'm going to pop into this
hidden file and change something so we

00:03:49.800 --> 00:03:54.050
can look at what it looks like when you
get it correct.

00:03:54.330 --> 00:03:58.680
Here I'm just switching it so instead
of running user_main() it's gonna run this

00:03:58.680 --> 00:04:05.400
solution_main() which I I won't let you
look at. But now if I hit Submit the

00:04:05.400 --> 00:04:09.240
solution is going to run and then you
see the results output: The

00:04:09.240 --> 00:04:12.989
coordinate point (1,1) lies in the
First quadrant. Down here it

00:04:12.989 --> 00:04:17.700
says in green "Passed test case" etc and
then it finally gives you a score saying

00:04:17.700 --> 00:04:22.200
100 so you earned eight out of eight
points. This is really where the

00:04:22.200 --> 00:04:25.500
power of codeboard comes in you can
actually test your code and verify that

00:04:25.500 --> 00:04:29.390
it works before you actually hit Submit.

00:04:30.130 --> 00:04:35.930
Another caveat though is that when
you're actually hitting Submit this

00:04:35.930 --> 00:04:39.650
output up here might
look different, it might look a little

00:04:39.650 --> 00:04:43.880
weird. Don't worry about that; the only
thing you need to pay attention to is

00:04:43.880 --> 00:04:48.650
this green or red text. Green
basically means that you passed red

00:04:48.650 --> 00:04:54.550
means that you didn't pass. I
think that's pretty much it for the

00:04:54.550 --> 00:05:02.140
brief introduction. Please contact me if
you have any questions

